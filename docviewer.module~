<?php
require_once('docviewer.cfg');

//определяет список возможных прав
function docviewer_perm() {
  return array("access docviewer content", "administer docviewer", "access docviewer source", "create docviewer nodes", "edit docviewer nodes");
}

//определение доступа к функциям
function docviewer_access($op, $node, $account) {
  if ($op == 'create') {
    return user_access('create docviewer nodes', $account);
  }
  if ($op == 'update' || $op == 'delete') {
    return user_access('edit docviewer nodes', $account);
  }
}

//вывод справки
function docviewer_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#docviewer":
      $output = '<p>'. t("Display interface for viewing docs (now only pdf)") .'</p>';
      break;
  }
  return $output;
}

//страница администрирования
function docviewer_admin() {
  $form = array();
  $form['docviewer_header'] = array(
    '#type' => 'textfield',
    '#title' => t('Default header'),
    '#default_value' => variable_get('docviewer_header', 'DocViewer'),
    '#size' => 20,
    '#maxlength' => 30,
    '#description' => t("Default header of document navigator"),
    '#required' => TRUE,
  );
  return system_settings_form($form);
}

//ссылка в меню
function docviewer_menu() {
  $items = array();
  $items['admin/settings/docviewer'] = array(
    'title' => t('DocViewer settings'),
    'description' => t('Settings for DocViewer'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('docviewer_admin'),
    'access arguments' => array('administer docviewer'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/content/docviewer'] = array(
    'title' => t('DocViewer documents'),
    'description' => t('Add and delete documents from list'),
    'page callback' => 'docviewer_edit_list',
    'access arguments' => array('administer docviewer'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['books/%user_uid_optional/%docviewer_document/%'] = array(
    'page callback' => 'docviewer_get_page',
    'page arguments' => array(1, 2, 3),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access docviewer content'),
  );
  $items['docviewer/%docviewer_document/delete'] = array(
    'title' => t('Delete document'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('docviewer_delete_confirm', 1),
    'access arguments' => array('administer docviewer'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

//создание типа публикации
function docviewer_node_info() {
  return array(
    'docviewer_page' => array(
      'name' => t('page with document'),
      'module' => 'docviewer',
      'description' => "This is node with online viewer.",
    )
  );
}

//формы при создании новой публикации
function docviewer_form(&$node, $form_state) {
  $type = node_get_types('type', $node);
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#weight' => -5,
  );
  $form['body_filter']['body'] = array(
    '#type' => 'textarea',
    '#title' => t('Description of documents'),
    '#default_value' => $node->body,
    '#required' => FALSE,
  );
  return $form;
}

//формы
//загрузка файла на сервер
function docviewer_upload_form() {
  global $user;
  //Администратор может загружать любые файлы. Проверки отключаются
  if ($user->uid == 1) {
    drupal_set_message("You are login as admin. File validation off.", "warning");
  }
  $form = array();
  //если условие выполняется значит была попытка загрузить файл больше разрешенного размера
  if (($_SERVER['CONTENT_LENGTH'])&&(parse_size(ini_get("post_max_size")) < $_SERVER['CONTENT_LENGTH'])) {
    drupal_set_message(t("File size is larger than allowed."), 'error');
  }
  $form['#attributes'] = array('enctype' => "multipart/form-data");
  $form['upload'] = array(
    '#type' => 'file',
    '#title' => t('Upload document'),
    '#size' => 22,
    '#weight' => 0,
  );
  $form['max_filesize'] = array(
    '#type' => 'markup',
    '#value' => "<b>Max file size:</b> ". (file_upload_max_size()/1024/1024) .'MB<br>',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save document'),
  );
  return $form;
}

//обработка данных из формы docviewer_upload
//TODO:AJAX, перенаправление на страницу с прогрессбаром
//TODO:learn drupal path build function, and rewrite function
//TODO:check mimetype
//TODO:add checks
function docviewer_upload_form_submit($form, &$form_state) {
  $file = _docviewer_upload_doc($form, $form_state); 
  switch ($file['error']) {
    case 0: 
      db_query("UPDATE {docviewer_documents} SET active=1 WHERE md5sum='%s'", $file['md5sum']); 
      break;
    case 1: break;
    case 4:
      unlink($file['source_by_id']);
      db_query("DELETE FROM {docviewer_documents} WHERE md5sum='%s'", $file['md5sum']);
    case 3:
      _rm($file['cache_dir']);
    case 2: 
      unlink($file['source_file']);
  }
}

//TODO: move all variables in array 'status'
//upload document
//return:
//0 - succesfull
//1 - error without actions
//2 - save file
//3 - create cash-folder
//4 - rename document
function _docviewer_upload_doc($form, &$form_state) {
  global $_source_dir;
  global $_cache_dir;
  global $user;
  $status = array();
  $validators = array(
    "file_validate_extensions" => array('pdf'),
  );
  $dest = file_directory_path() .'/'. $_source_dir;
  $cache = file_directory_path() .'/'. $_cache_dir;
  //проверка директории для сохранения
  if (!file_check_directory($dest, FILE_CREATE_DIRECTORY)) {
    form_set_error('upload', t("Can't create directory for file"));
    $status['error'] = 1;
    return $status;
  }
  if (!file_check_directory($cache, FILE_CREATE_DIRECTORY)) {
    form_set_error('upload', t("Can't create directory for file"));
    $status['error'] = 1;
    return $status;
  }
  $file = file_save_upload('upload', $validators, $dest);
  //не удалось сохранить файл
  if ($file == 0) {
    form_set_error('upload', t("File saving fail."));
    $status['error'] = 1;
    return $status;
  }
  $status['source_file'] = $file->filepath;
  $md5sum = md5_file($file->filepath);
  $status['md5sum'] = $md5sum;
  $result = db_query("SELECT * FROM {docviewer_documents} WHERE md5sum='%s'", $md5sum);
  if ($result->num_rows) {
    form_set_error('upload', t("File already exists"));
    $status['error'] = 2;
    return $status;
  }
  $cache_folder = file_directory_path() ."/". $_cache_dir ."/". $md5sum; 
  $status['cache_dir'] = $cache_folder;
  //не удалось создать папку для кэша
  if (!file_check_directory($cache_folder, FILE_CREATE_DIRECTORY)) {
    form_set_error('upload', "Failed create cache files folder.");
    return 2;
  }
  $pages = _docviewer_caching_document($file->filepath, $cache_folder);
  //Изображений не создано
  if ($pages <= 0) {
    form_set_error('upload', t("Document reading fail."));
    $status['error'] = 3; 
    return $status;
  }
  //Не удалось добавить информацию о файле в базу
  if (!db_query("INSERT INTO {docviewer_documents} (filename, pages, md5sum, uid, upload_date, filesize) VALUES('%s', '%d', '%s', '%d', '%d', '%d')", $file->filename, $pages, $md5sum, $user->uid, $file->timestamp, $file->filesize)) {
    form_set_error('upload', t("Insert in database failed."));
    $status['error'] = 3; 
    return $status;
  }
  $result = db_query("SELECT docid FROM {docviewer_documents} WHERE md5sum='%s'", $md5sum);
  //не удалось узнать id только что созданного документа
  if (!$result) {
    form_set_error('upload', t("Database error."));
    $status['error'] = 3; 
    return $status;
  }
  $result = db_fetch_object($result);
  $source_move = $dest ."/". $result->docid; 
  //rename doc by id
  if (!rename($file->filepath, $source_move)) {
    form_set_error('upload', t('Rename document fail.'));
    $status['error'] = 4; 
    return $status;
  }
  $status['source_by_id'] = $source_move;
  $cache_move = file_directory_path() .'/'. $_cache_dir .'/'. $result->docid;
  //переименование папки с кэшем
  if (!rename($cache_folder, $cache_move)) {
    form_set_error('upload', t("Rename cache folder fail. From '$cache_folder' to '$cache_move'. "));
    $status['error'] = 3; 
    return $status;
  }
  drupal_set_message("File ". check_plain($file->filename) ." succesfull upload.");
  $status['error'] = 0;
  return $status;
}

//make cache for document. return page count of document
//TODO: add check with "is_dir"
function _docviewer_caching_document($doc, $cache_folder) {
  $files = array();
  exec("pdftoppm -png '". realpath($doc) ."' '". realpath($cache_folder) ."/page'");
  $file = file_scan_directory($cache_folder, "^page{1}-[0-9]+\.png$");
  foreach ($file as $value) {
    if(_docviewer_resize($value->filename, 750, 0)) drupal_set_message("Resize file $value->basename failed.");
  }
  return count($file);
}

//страница редактирования списка файлов
function docviewer_edit_list() {
  $output = "";
  $output .= drupal_get_form("docviewer_upload_form");
  $query = db_query("SELECT docid, filename, filesize, pages FROM {docviewer_documents} WHERE active=1");
  $header = array('Id', t('Filename'), t('Size'), t('Pages'), t('Actions')); 
  $data = array();
  while ($row = db_fetch_object($query)) {
    $actions = l(t(delete), 'docviewer/'. $row->docid .'/delete', array('alias' => TRUE)); 
    $data[] = array(
      $row->docid,
      $row->filename,
      $row->filesize,
      $row->pages,
      $actions,
    );
  }
  $output .= theme_table($header, $data);
  return $output; 
}

//рекурсивное удаление папки или файла
function _rm($dir) {
 if (is_dir($dir)) {
   $objects = scandir($dir);
   foreach ($objects as $object) {
     if ($object != "." && $object != "..") {
       if (filetype($dir ."/". $object) == "dir") _rm($dir ."/". $object); else unlink($dir ."/". $object);
     }
   }
   reset($objects);
   rmdir($dir);
 }
 if (is_file($dir)) {
  unlink($dir);
 }
}

//удаление документа
function docviewer_delete_confirm_submit($form, &$form_state) {
  global $_source_dir;
  global $_cache_dir;
  $id = $form_state['values']['docid'];
  if (!db_query("DELETE FROM {docviewer_documents} WHERE docid=%d", $id)) {
    drupal_set_message(t("Delete document $id from database failed."), "error");
  }
  _rm(file_directory_path() ."/". $_source_dir ."/". $id); 
  _rm(file_directory_path() ."/". $_cache_dir ."/". $id); 
  drupal_set_message(check_plain(t('Document succesfull delete')));
  drupal_goto('admin/content/docviewer');
}

//форма подтверждения удаления
function docviewer_delete_confirm(&$form_state, $doc) {
  $form['docid'] = array(
    '#type' => 'value',
    '#value' => $doc->docid,
  );
  return confirm_form($form,
    'Вы действительно хотите удалить документ <i>' . check_plain($doc->filename) . '</i>?',

    'docviewer',
    'Эта операция не обратима',
    'Удалить',
    'Отменить'
  );
}

//проверка существования документа
function docviewer_document_load($id) {
  $result = db_query("SELECT * FROM {docviewer_documents} WHERE docid=%d AND active=1", $id);
  return db_fetch_object($result);
}

//return the $page page of document with id=$docid 
//TODO:check host of the document
function docviewer_get_page($uid, $doc, $page) {
  global $_cache_dir;
  $output = "";
  if (preg_match("/^page-0*([0-9]+)/i", $page, $matches) == 1){
    $page = $matches[1][0];
    $zeros = "";
    for ($i = 0; $i<(strlen($doc->pages)-strlen($page)); $i++) $zeros .= "0";
      if (($page <= $doc->pages)&&($page > 0)) {
        header ("Content-Type: image/png");
        readfile(realpath(file_directory_path() ."/". $_cache_dir ."/". $doc->docid ."/page-". $zeros . $page .".png"));
      }
  }
  drupal_goto();
} 

//resize image (create only smaller picture). if width or height is 0 then it set auto (by ratio)
//0 - succesfull
//1 - error
function _docviewer_resize($path, $width, $height) {
  if ((!width)&&(!height)) return 1;
  if (!file_exists($path)) return 1;
  $file = getimagesize($path);
  print_r($file);
  if (($file === FALSE)||($file[0] < $width)||($file[1] < $height)) return 1;
  $format = strtolower(substr($file['mime'], strpos($file['mime'], '/')+1)); 
  if ($format != "png") return 1;
  $src = imagecreatefrompng($path);
  if ($height == 0) $height = floor($width*$file[1]/$file[0]);
  if ($width == 0) $width = floor($height*$file[0]/$file[1]);
  $dest = imagecreatetruecolor($width, $height);
  imagecopyresampled($dest, $src, 0, 0, 0, 0, $width, $height, $file[0], $file[1]);
  imagepng($dest, $path);
  imagedestroy($dest);
  imagedestroy($src);
  return 0;
}
  
