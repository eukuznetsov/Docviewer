<?php
require_once('docviewer.cfg');

//определяет список возможных прав
function docviewer_perm() {
  return array("read books", "download books", "add books", "delete own books",  "administer docviewer");
}

//определение доступа к функциям
function docviewer_access($op, $node, $account) {
  if ($op == 'create') {
    return user_access('create nodes', $account);
  }
  if ($op == 'update' || $op == 'delete') {
    return user_access('edit docviewer nodes', $account);
  }
}

//вывод справки
function docviewer_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#docviewer":
      $output = '<p>'. t("Display interface for viewing docs (now only pdf)") .'</p>';
      break;
  }
  return $output;
}

//страница администрирования
function docviewer_admin() {
  $form = array();
  $form['docviewer_header'] = array(
    '#type' => 'textfield',
    '#title' => t('Default header'),
    '#default_value' => variable_get('docviewer_header', 'DocViewer'),
    '#size' => 20,
    '#maxlength' => 30,
    '#description' => t("Default header of document navigator"),
    '#required' => TRUE,
  );
  return system_settings_form($form);
}

//ссылка в меню
function docviewer_menu() {
  $items = array();
  $items['admin/settings/docviewer'] = array(
    'title' => t('DocViewer settings'),
    'description' => t('Settings for DocViewer'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('docviewer_admin'),
    'access arguments' => array('administer docviewer'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['books'] = array(
    'title' => t('Documents'),
    'description' => t('Documents list'),
    'page callback' => 'docviewer_list',
    'page arguments' => array(), 
    'type' => MENU_NORMAL_ITEM,
    'access callback' => '_docviewer_list_perm',
  );
  $items['books/%user_uid_optional'] = array(
    'page callback' => 'docviewer_list',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
    'access callback' => '_docviewer_list_perm',
  );
  $items['books/%user_uid_optional/%docviewer_document/%'] = array(
    'page callback' => 'docviewer_get_page',
    'page arguments' => array(1, 2, 3),
    'type' => MENU_CALLBACK,
    'access arguments' => array('read books'),
  );
  $items['books/%user_uid_optional/%docviewer_document'] = array(
    'page callback' => 'docviewer_read_book',
    'page arguments' => array(1, 2),
    'type' => MENU_CALLBACK,
    'access arguments' => array('read books'),
  );
  $items['docviewer/%docviewer_document/delete'] = array(
    'title' => t('Delete document'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('docviewer_delete_confirm', 1),
    'access callback' => 'docviewer_delete_document',
    'type' => MENU_CALLBACK,
  );
  $items['books/%user_uid_optional/%docviewer_document/get'] = array(
    'page callback' => 'docviewer_get_document',
    'page arguments' => array(1, 2),
    'type' => MENU_CALLBACK,
    'access arguments' => array('download books'),
  );
   $items['admin/content/docviewer_clear'] = array(
    'title' => t('Delete failed documents'),
    'description' => t('Delete failed documents.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('docviewer_clear_form'),
    'access arguments' => array('administer docviewer'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['books/%user_uid_optional/%docviewer_document/edit'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('docviewer_edit_form', 2),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => 'docviewer_edit_access',
    'access arguments' => array(2),
  );
  return $items;
}

//формы при создании новой публикации
function docviewer_form(&$node, $form_state) {
  $type = node_get_types('type', $node);
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#weight' => -5,
  );
  $form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);
  $form['document'] = array(
	'#type' => 'textfield',
	'#title' => t('Enter document number'),
	'#required' => TRUE,
	'#weight' => 1,
  );
  return $form; 
}

//формы
//загрузка файла на сервер
function docviewer_upload_form() {
  global $user;
  
  //Администратор может загружать любые файлы. Проверки отключаются
  if ($user->uid === 1) {
    drupal_set_message("You are login as admin. File validation off.", "warning");
  }
  
  $objects = array();
  $objects = docviewer_get_objects_select();
  $objects[t('Add own section...')] = t('Add own section...');
  
  $form = array();
  //если условие выполняется значит была попытка загрузить файл больше разрешенного размера
  if (($_SERVER['CONTENT_LENGTH'])&&(parse_size(ini_get("post_max_size")) < $_SERVER['CONTENT_LENGTH'])) {
    drupal_set_message(t("File size is larger than allowed."), 'error');
  }
   $form['subj'] = array(
	'#type' => 'fieldset',
	'#title' => t('Upload file'),
	'#collapsible' => TRUE,
	'#collapsed' => FALSE,
  );
  $form['#attributes'] = array('enctype' => "multipart/form-data");
  $form['subj']['name'] = array(
	'#type' => 'textfield',
	'#title' => t('Document name'),
  );
  $form['subj']['notify'] = array(
    '#type' => 'markup',
    '#value' => '<div>'. t('If document name not write, document save with file name') .'</div>',
  );
  
  $form['subj']['section'] = array(
  '#type' => 'fieldset',
  '#collapsible' => FALSE,
  '#collapsed' => FALSE,
  '#prefix' => "<div class='container-inline'>",
  '#suffix' => '</div>',
	'#element_validate' => array('_subject_validate'),
  );
  $form['subj']['section']['subject'] = array(
	'#type' => 'select',
	'#title' => t('Section'),
	'#required' => TRUE,
	'#options' => $objects,
  );
  $form['subj']['section']['own_subject'] = array(
	'#type' => 'textfield',
	'#title' => t(''),
  );
  $form['subj']['upload'] = array(
    '#type' => 'file',
    '#title' => t('Upload file'),
    '#size' => 22,
  );
  $form['subj']['max_filesize'] = array(
    '#type' => 'markup',
    '#value' => "<div><b>Max file size:</b> ". (file_upload_max_size()/1024/1024) .'MB</div>',
  );
  $form['subj']['download'] = array(
	'#type' => 'checkbox',
	'#title' => t('Allow to download'),
  );
  $form['subj']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Upload document'),
  );
  return $form;
}

//обработка данных из формы docviewer_upload
//TODO:AJAX, перенаправление на страницу с прогрессбаром
//TODO:learn drupal path build function, and rewrite function
//TODO:check mimetype
function docviewer_upload_form_submit($form, &$form_state) {
  $file = _docviewer_upload_doc($form, $form_state);
  switch ($file['error']) {
    case 0: 
      db_query("UPDATE {docviewer_documents} SET active=1 WHERE md5sum='%s'", $file['md5sum']); 
      break;
    case 1: break;
    case 4:
      unlink($file['source_by_id']);
      db_query("DELETE FROM {docviewer_documents} WHERE md5sum='%s'", $file['md5sum']);
    case 3:
      _rm($file['cache_dir']);
    case 2: 
      unlink($file['source_file']);
  }
}

//TODO: move all variables in array 'status'
//upload document
//return:
//0 - succesfull
//1 - error without actions
//2 - save file
//3 - create cash-folder
//4 - rename document
function _docviewer_upload_doc($form, &$form_state) {
  global $_source_dir;
  global $_cache_dir;
  global $user;
  $status = array();
  $validators = array(
    "file_validate_extensions" => array('pdf'),
  );
  $dest = file_directory_path() .'/'. $_source_dir;
  $cache = file_directory_path() .'/'. $_cache_dir;
  //проверка директории для сохранения
  if (!file_check_directory($dest, FILE_CREATE_DIRECTORY)) {
    form_set_error('upload', t("Can't create directory for file"));
    $status['error'] = 1;
    return $status;
  }
  if (!file_check_directory($cache, FILE_CREATE_DIRECTORY)) {
    form_set_error('upload', t("Can't create directory for file"));
    $status['error'] = 1;
    return $status;
  }
  
  //костыль: не вставляется значение напрямую из формы
  if ($form_state['values']['download'] == "1") {
	  $is_download = 1;
  }
  else {
	$is_download = 0;
  }
  
  $file = file_save_upload('upload', $validators, $dest);
  if (empty($form_state['values']['name'])) $form_state['values']['name'] = $file->filename;
  //не удалось сохранить файл
  if ($file == 0) {
    form_set_error('upload', t("File saving fail."));
    $status['error'] = 1;
    return $status;
  }
  $status['source_file'] = $file->filepath;
  $md5sum = md5_file($file->filepath);
  $status['md5sum'] = $md5sum;
  $result = db_query("SELECT * FROM {docviewer_documents} WHERE md5sum='%s'", $md5sum);
  if ($result->num_rows) {
    form_set_error('upload', t("File already exists"));
    $status['error'] = 2;
    return $status;
  }
  $cache_folder = file_directory_path() ."/". $_cache_dir ."/". $md5sum; 
  $status['cache_dir'] = $cache_folder;
  //не удалось создать папку для кэша
  if (!file_check_directory($cache_folder, FILE_CREATE_DIRECTORY)) {
    form_set_error('upload', "Failed create cache files folder.");
    return 2;
  }
  $pages = _docviewer_caching_document($file->filepath, $cache_folder);
  //Изображений не создано
  if ($pages <= 0) {
    form_set_error('upload', t("Document reading fail."));
    $status['error'] = 3; 
    return $status;
  }
  
  $subject = ($form_state['values']['subject'] === t('Add own section...')) ? $form_state['values']['own_subject'] : $form_state['values']['subject'];
  
  //Не удалось добавить информацию о файле в базу
  if (!db_query("INSERT INTO {docviewer_documents} (name, pages, md5sum, uid, upload_date, filesize, download, filename, subject) VALUES('%s', '%d', '%s', '%d', '%d', '%d', '%d', '%s', '%s')", $form_state['values']['name'], $pages, $md5sum, $user->uid, $file->timestamp, $file->filesize, $is_download, $file->filename, check_plain($subject))) {
    form_set_error('upload', t("Insert in database failed."));
    $status['error'] = 3; 
    return $status;
  }
  $result = db_query("SELECT docid FROM {docviewer_documents} WHERE md5sum='%s'", $md5sum);
  //не удалось узнать id только что созданного документа
  if (!$result) {
    form_set_error('upload', t("Database error."));
    $status['error'] = 3; 
    return $status;
  }
  $result = db_fetch_object($result);
  $source_move = $dest ."/". $result->docid; 
  //rename doc by id
  if (!rename($file->filepath, $source_move)) {
    form_set_error('upload', t('Rename document fail.'));
    $status['error'] = 4; 
    return $status;
  }
  $status['source_by_id'] = $source_move;
  $cache_move = file_directory_path() .'/'. $_cache_dir .'/'. $result->docid;
  //переименование папки с кэшем
  if (!rename($cache_folder, $cache_move)) {
    form_set_error('upload', t("Rename cache folder fail. From '$cache_folder' to '$cache_move'. "));
    $status['error'] = 3; 
    return $status;
  }
  drupal_set_message("File ". check_plain($file->filename) ." succesfull upload.");
  $status['error'] = 0;
  return $status;
}

//make cache for document. return page count of document
//TODO: add check with "is_dir"
function _docviewer_caching_document($doc, $cache_folder) {
  $files = array();
  exec("pdftoppm -png '". realpath($doc) ."' '". realpath($cache_folder) ."/page'");
  $file = file_scan_directory($cache_folder, "^page{1}-[0-9]+\.png$");
  foreach ($file as $value) {
    if (_docviewer_resize($value->filename, 750, 0)) drupal_set_message("Resize file $value->basename failed.");
  }
  return count($file);
}

//рекурсивное удаление папки или файла
function _rm($dir) {
 if (is_dir($dir)) {
   $objects = scandir($dir);
   foreach ($objects as $object) {
     if ($object != "." && $object != "..") {
       if (filetype($dir ."/". $object) == "dir") _rm($dir ."/". $object); else unlink($dir ."/". $object);
     }
   }
   reset($objects);
   rmdir($dir);
 }
 if (is_file($dir)) {
  unlink($dir);
 }
}

//удаление документа
function docviewer_delete_confirm_submit($form, &$form_state) {
  global $_source_dir;
  global $_cache_dir;
  $id = $form_state['values']['docid'];
  if (!db_query("DELETE FROM {docviewer_documents} WHERE docid=%d", $id)) {
    drupal_set_message(t("Delete document") . check_plain($id) . t("from database failed."), "error");
  }
  _rm(file_directory_path() ."/". $_source_dir ."/". $id); 
  _rm(file_directory_path() ."/". $_cache_dir ."/". $id); 
  drupal_set_message(check_plain(t('Document succesfull delete')));
  drupal_goto("books/");
}

//форма подтверждения удаления
function docviewer_delete_confirm(&$form_state, $doc) {
  global $user;
  $form['docid'] = array(
    '#type' => 'value',
    '#value' => $doc->docid,
  );
  if(user_access('delete own books')&&($doc->uid == $user->uid)) {
	  $own = true;
  }
  else {
	  $own = false;
  }
  if (user_access('administer docviewer')||$own) {
    return confirm_form($form, t("Are you sure you want to delete the document <i>") . check_plain($doc->name) . '</i>?', 'docviewer', t('This action cannot be undone.'), t('Delete'), t('Cancel') );
  }
  else {
    drupal_set_message("You haven't permission to delete this document.", "error");
    drupal_goto("books");
  }
}

//проверка существования документа
function docviewer_document_load($id) {
  $result = db_query("SELECT * FROM {docviewer_documents} WHERE docid=%d AND active=1", $id);
  return db_fetch_object($result);
}

//return the $page page of document with id=$docid 
//TODO:check host of the document
function docviewer_get_page($uid, $doc, $page) {
  global $_cache_dir;
  if (preg_match("/^page-0*([0-9]+)$/i", $page, $matches) == 1) {
    $page = $matches[1];
    $zeros = "";
    for ($i = 0; $i<(strlen($doc->pages)-strlen($page)); $i++) $zeros .= "0";
      if (($page <= $doc->pages)&&($page > 0)) {
        header("Content-Type: image/png");
        readfile(realpath(file_directory_path() ."/". $_cache_dir ."/". $doc->docid ."/page-". $zeros . $page .".png"));
      }
  }
  drupal_goto();
} 

//resize image (create only smaller picture) by width.
//0 - succesfull
//1 - error
function _docviewer_resize($path, $width) {
  //$test=new Imagick($path);
  //$cur_size=$test->getImageGeometry();
  //if($width < $cur_size['width']) {
	//$test->thumbnailImage($width,0);
  //}
  //$test->setImageColorspace(imagick::COLORSPACE_SRGB);
  //$test->writeImage($path);
////Change quantity of colors
  //$src = imagecreatefrompng($path);
  //imagetruecolortopalette($src, false, 255);
  //imagepng($src, $path);
  //imagedestroy($src);
  return 0;
}
 
 
function docviewer_list($uid = FALSE) {
  $output = "";
  
  if (user_access('add books')||user_access('administer docviewer')) $output .= drupal_get_form("docviewer_upload_form");
  $output .= drupal_get_form('docviewer_list_filter', $uid);
  return $output; 
} 

//access check documents
function docviewer_delete_document() {
  if (user_access('administer docviewer')||user_access('delete own books')) return TRUE;
  return FALSE;
}

function docviewer_node_info() {
  return array(
	'docviewer' => array(
	  'name' => t('Document viewer'),
	  'module' => 'docviewer',
	  'description' =>t("Node with embeded viewer."),
	)
  );
}

function docviewer_read_book($uid, $document) {
	global $user;
	$out = "";
	$out .= theme('docviewer_viewer', $document, $uid);
	return $out;
}

function _docviewer_list_perm() {
	return TRUE;
}

function docviewer_theme() {
	return array(
		'docviewer_viewer' => array(
			'template' => 'viewer',
			'arguments' => array('document' => NULL, 'uid' => NULL),
		),
		'docviewer_clear_form' => array(
			'file' => 'viewer',
			'arguments' => array('form' => NULL),
		),
	);
}

function docviewer_get_document($uid, $doc) {
  global $_source_dir;
  header("Content-Type: application/octet-stream");
  header("Content-Disposition: attachment; filename=\"". $doc->filename ."\";" );
  readfile(realpath(file_directory_path() ."/". $_source_dir ."/". $doc->docid));
  drupal_goto();
} 

function docviewer_clear_form() {
	global $_source_dir;
	global $_cache_dir;
	$form = array();
	$form['header'] = array(
		'#type' => 'value',
		'#value' => array(
			theme('table_select_header_cell'),
			t('File'),
			t('Warning')
		),
	);
	$files = scandir(file_directory_path() ."/". $_source_dir);
	$query = db_query("SELECT docid, pages FROM {docviewer_documents}");
	$docs = array();
	$options = array();
	while ($row = db_fetch_object($query)) {
		$docs[$row->docid] = array(
			'pages' => $row->pages,
		);
	}
	foreach($files as $file) {
		if (($file == ".")||($file == "..")) {
			continue;
		}
		if (!isset($docs[$file])) {
			$options[$file] = '';
			$form['error'][$file] = array(
				'#type' => 'value',
				'#value' => 'File not in base',
			);
			$form[$file] = array(
				'#type' => 'value',
				'#value' => 'source',
			);
			continue;
		}
	}
	$files = scandir(file_directory_path() ."/". $_cache_dir);
	foreach($files as $file) {
		if (($file == ".")||($file == "..")) {
			continue;
		}
		if (!isset($docs[$file])) {
			$options[$file] = '';
			if (isset($form['error'][$file])) {
				$where = "all";
				$err = "Record in database not exists";
			}
			else {
				$where = "source";
				$err = "File not in base";
			}
			$form['error'][$file] = array(
				'#type' => 'value',
				'#value' => $err,
			);
			$form[$file] = array(
				'#type' => 'value',
				'#value' => $where,
			);
			continue;
		}
	}	
	$form['chkbox'] = array(
	    '#type' => 'checkboxes',
		'#options' => $options,
    );
    $form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Delete'),
	);
	return $form;
}

function theme_docviewer_clear_form($form) {
	$output = "";
	$rows = array();
	foreach (element_children($form['error']) as $key) {
		$rows[] = array(
			drupal_render($form['chkbox'][$key]),
			'filename' => $key,
			'error' => $form['error'][$key]['#value'],
		);
	}
	$output .= theme("table", $form['header']['#value'], $rows);
	$output .= drupal_render($form);
	return $output;
}

function docviewer_clear_form_submit(&$form, $form_state) {
	global $_source_dir;
	global $_cache_dir;
	$path = "";
	foreach(element_children($form_state['values']['chkbox']) as $key) {
		if ($form_state['values']['chkbox'][$key] === $key) {
			$path = file_directory_path();
			if ($form_state['values'][$key] == "source") {
				$path = realpath($path ."/". $_source_dir);
			}
			if ($form_state['values'][$key] == "cache") {
				$path = realpath($path ."/". $_cache_dir);
			}
			if ($form_state['values'][$key] == "all") {
				_rm($path ."/". $_cache_dir ."/". $key);
				$path = realpath($path ."/". $_source_dir);
			}
			_rm($path ."/". $key);
		}
	}
}

function docviewer_edit_form($form, $doc) {
	
	$objects = array();
	$objects = docviewer_get_objects_select();
	$objects[t('Add own section...')] = t('Add own section...');
	
	$form = array();
	$form['id'] = array(
		'#type' => 'hidden',
		'#value' => $doc->docid,
	);
	$form['name'] = array(
	'#type' => 'textfield',
	'#title' => t('Document name'),
	'#weight' => 0,
	'#required' => TRUE,
	'#default_value' => $doc->name,
	);
	$form['section'] = array(
	'#type' => 'fieldset',
	'#collapsible' => FALSE,
	'#collapsed' => FALSE,
	'#prefix' => "<div class='container-inline'>",
	'#suffix' => '</div>',
	'#element_validate' => array('_subject_validate'),
	);
	$form['section']['subject'] = array(
	'#type' => 'select',
	'#title' => t('Section'),
	'#required' => TRUE,
	'#options' => $objects,
	);
	$form['section']['own_subject'] = array(
	'#type' => 'textfield',
	'#title' => t(''),
	);
	$form['download'] = array(
	'#type' => 'checkbox',
	'#title' => t('Allow to download'),
	'#weight' => 5,
	'#default_value' => $doc->download,
	);
	$form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 6,
	);
	return $form;
}

function docviewer_edit_form_submit($form, &$form_state) {
	$subject = ($form_state['values']['subject'] === t('Add own section...')) ? $form_state['values']['own_subject'] : $form_state['values']['subject'];
	db_query("UPDATE {docviewer_documents} SET name='%s', download='%d', subject='%s' WHERE docid='%d'", $form_state['values']['name'], $form_state['values']['download'],  check_plain($subject), $form_state['values']['id']);
	drupal_goto("/books");
}

function docviewer_edit_access($doc) {
	global $user;
	if (($user->uid == $doc->uid)||(user_access('administer docviewer'))) return TRUE;
}

function docviewer_viewer_preprocess(&$variables, $hook) {
}

function docviewer_get_objects_select() {
  $query = db_query("SELECT subject FROM {docviewer_documents}");
  $objects = array();
  while ($row = db_fetch_object($query)) {
		if (!isset($objects[$row->subject])) $objects[$row->subject] = $row->subject;
  }
  return $objects;
}

function _subject_validate($element, $form_state) {
	if (($element['#post']['subject'] === t('Add own section...'))&&(empty($element['#post']['own_subject']))) {
		form_error($element, t('Enter section name'));
	}
}

function docviewer_list_filter(&$form_state, $uid) {
	global $user;
	$form = array();
	
	$users = docviewer_get_users_select();
	$sections = docviewer_get_objects_select();
	$sections['all'] = t('All');
	$users['all'] = t('All');
	
	if ($user->uid > 0) {
		$form['filter'] = array(
		'#type' => 'fieldset',
		'#collapsible' => TRUE,
		'#collapsed' => FALSE,
		'#title' => t('Filter'),
		);
		$form['filter']['fields'] = array(
			'#prefix' => '<div class="container-inline">',
			'#suffix' => '</div>',
		);
		$form['filter']['fields']['section'] = array(
		'#type' => 'select',
		'#title' => t('Section'),
		'#required' => FALSE,
		'#options' => $sections,
		'#default_value' => (isset($form_state['storage']['section'])) ? $form_state['storage']['section'] : t('all'),
		);
		$form['filter']['fields']['user'] = array(
		'#type' => 'select',
		'#title' => t('User'),
		'#required' => FALSE,
		'#options' => $users,
		'#default_value' => (isset($form_state['storage']['user'])) ? $form_state['storage']['user'] : t('all'),
		);
		$form['filter']['submit'] = array(
	    '#type' => 'submit',
	    '#value' => t('Apply'),
	    '#validate' => array('docviewer_filter_validate'),
		);
	}
	
	$perpage = 20;
  
	$header = array(
	array('data' => 'Id', 'field' => 'docid'),
	array('data' => t('Title'), 'field' => 'name'),
	array('data' => t('Section'), 'field' => 'subject'),
	array('data' =>  t('User'), 'field' => 'uid'),
	array('data' => t('Size'), 'field' => 'filesize'),
	array('data' => t('Pages'), 'field' => 'pages'), 
	t('Actions')	
	);
	
	//generate table
	$list = "";
	
	//build query
	$sql_end = "FROM {docviewer_documents} WHERE active=1";
	
	$sql_q = "SELECT COUNT(*) ";
	$sql_all = "SELECT * ";

	//get user for condition
	if(is_numeric($uid->uid)) {
		$sql_end .= " AND uid='". $uid->uid ."'";
	}elseif(isset($form['filter']['fields']['user']['#default_value']) && ($form['filter']['fields']['user']['#default_value'] != t('all'))){
		$sql_end .= " AND uid='". $form['filter']['fields']['user']['#default_value'] ."'";
	}
	
	//get section for condition
	if(isset($form['filter']['fields']['section']['#default_value']) && ($form['filter']['fields']['section']['#default_value'] != t('all'))){
		$sql_end .= " AND subject='". $form['filter']['fields']['section']['#default_value'] ."'";
	}	
	
	$sql_end .= " ". tablesort_sql($header);

	$sql = $sql_all . $sql_middle . $sql_end;
	$sql_count = $sql_q . $sql_middle . $sql_end;
		
	$query = pager_query($sql, $perpage, 0, $sql_count);
	$data = array();
	while ($row = db_fetch_object($query)) {
		$actions = "";
		if (user_access('read books')||user_access('administer docviewer')) {
			$actions .= l(t('view'), 'books/'. $row->uid .'/'. $row->docid);
		}
		if (($row->download == 1)&&(user_access('download books'))) {
			$actions .= '<br>';
			$actions .= l(t('download'), 'books/'. $row->uid .'/'. $row->docid .'/get');
		}
		if (docviewer_edit_access($row)) {
			$actions .= '<br>';
			$actions .= l(t('edit'), 'books/'. $row->uid .'/'. $row->docid .'/edit');
		}
		if ((($user->uid == $row->uid)&&user_access('delete own books'))||user_access('administer docviewer')) {
			$actions .= '<br>'; 
			$actions .= l(t('delete'), 'docviewer/'. $row->docid .'/delete', array('alias' => TRUE));
		}
		$data[] = array(
			$row->docid,
			check_plain($row->name),
			check_plain($row->subject),
			check_plain($row->uid),
			$row->filesize,
			$row->pages,
			$actions,
		);
	}
	$list .= theme_table($header, $data);
	$list .= theme('pager');
	
	$form['list'] = array(
		'#type' => 'markup',
		'#value' => $list,
	);
	return $form;
}

function docviewer_filter_validate($form, &$form_state) {
	$form_state['storage'] = $form_state['values'];
	$form_state['rebuild'] = TRUE;
}

//hard linked to table profile_values
function docviewer_get_users_select() {
  //get surname
  $query = db_query("SELECT users.uid, users.name, val.value FROM {users} AS users JOIN {docviewer_documents} AS docs ON users.uid=docs.uid LEFT JOIN {profile_values} AS val ON docs.uid=val.uid LEFT JOIN {profile_fields} AS profile ON val.fid=profile.fid WHERE profile.name='profile_surname' OR profile.name IS NULL AND docs.active=1");
  $objects = array();
  while ($row = db_fetch_object($query)) {
		if (!isset($objects[$row->uid])) {
			$objects[$row->uid] = $row->name;
			if (!empty($row->value)) $objects[$row->uid] .= " - ". check_plain($row->value);
		}
  }
  ////get name
  $query = db_query("SELECT docs.uid, val.value FROM {docviewer_documents} AS docs LEFT JOIN {profile_values} AS val ON docs.uid=val.uid LEFT JOIN {profile_fields} AS profile ON val.fid=profile.fid WHERE profile.name='profile_name' AND docs.active=1");
  while ($row = db_fetch_object($query)) {
	if (!empty($row->value))
		$objects[$row->uid] .= " ". check_plain(mb_substr($row->value, 0, 1)) .". ";
  }
  ////get secondname
  $query = db_query("SELECT docs.uid,  val.value FROM {docviewer_documents} AS docs LEFT JOIN {profile_values} AS val ON docs.uid=val.uid LEFT JOIN {profile_fields} AS profile ON val.fid=profile.fid WHERE profile.name='profile_pname' AND docs.active=1");
  while ($row = db_fetch_object($query)) {
	if (!empty($row->value))
		$objects[$row->uid] .= " ". check_plain(mb_substr($row->value, 0, 1)) .".";
  }
  return $objects;
}
